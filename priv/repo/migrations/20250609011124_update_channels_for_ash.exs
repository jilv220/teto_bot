defmodule TetoBot.Repo.Migrations.UpdateChannelsForAsh do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    # Remove the old primary key constraint from `channel_id` and any dependent foreign keys
    execute("ALTER TABLE channels DROP CONSTRAINT channels_pkey CASCADE")

    alter table(:channels) do
      # Add the new UUID primary key column
      add(:id, :uuid, primary_key: true, default: fragment("gen_random_uuid()"))
    end

    # Update guild_id column type to match the guilds table
    execute("ALTER TABLE channels ALTER COLUMN guild_id TYPE bigint USING guild_id::bigint")

    # Recreate the foreign key constraint
    alter table(:channels) do
      modify(:guild_id, references(:guilds, column: :guild_id, on_delete: :delete_all))
    end

    create unique_index(:channels, [:channel_id], name: "channels_unique_channel_id_index")
  end

  def down do
    drop_if_exists(
      unique_index(:channels, [:channel_id], name: "channels_unique_channel_id_index")
    )

    # Use raw SQL to modify the column with USING clause
    execute("ALTER TABLE channels ALTER COLUMN guild_id TYPE integer USING guild_id::integer")

    alter table(:channels) do
      remove(:id)
    end

    # Restore the original primary key constraint
    execute("ALTER TABLE channels ADD PRIMARY KEY (channel_id)")

    # Recreate the original foreign key constraint
    alter table(:channels) do
      modify(:guild_id, references(:guilds, column: :guild_id, on_delete: :delete_all))
    end
  end
end
